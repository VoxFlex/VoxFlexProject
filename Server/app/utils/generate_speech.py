import os
from dotenv import load_dotenv
import openai
from pydub import AudioSegment

load_dotenv(".env.local")
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY is not set in .env.local file")

client = openai.OpenAI(api_key=api_key)

def generate_speech(text: str, output_audio_path: str, voice_model: str = "alloy"):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OpenAI TTS-1
    ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á: alloy, ash, coral, echo, fable, onyx, nova, sage, shimmer
    """
    try:
        print(f"üó£Ô∏è Generating TTS with voice model: {voice_model}")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice=voice_model,
            input=text
        ) as response:
            temp_audio_path = "temp_tts_output.mp3"
            response.stream_to_file(temp_audio_path)

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô .wav (‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        segment_audio = AudioSegment.from_file(temp_audio_path)

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô WAV format
        segment_audio = segment_audio.set_frame_rate(44100).set_channels(2)

        # ‚úÖ Export to the specified output path
        segment_audio.export(output_audio_path, format="wav")
        print(f"‚úÖ TTS generated successfully at: {output_audio_path}")

        # ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(temp_audio_path)

    except Exception as e:
        print(f"‚ùå Error during TTS generation: {e}")
        raise RuntimeError(f"‚ùå Error generating speech: {e}")
